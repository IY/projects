{~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
{-----------(Jakkles Water Filler V2.1)-----------}
{~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
{                                                 }
{ This script will fill any of the following:     }
{   # Bowls                                       }
{   # Buckets                                     }
{   # Jugs                                        }
{   # Vials                                       }
{ With water at the following locations:          }
{   # Varrock (east bank)                         }
{   # Edgeville                                   }
{   # Falador                                     }
{   # Other places might be added                 }
{                                                 }
{ _______________________________________________ }
{                                                 }
{ Fill out Settings and Declare Players which,    }
{ are documented to the right of each line for,   }
{ instructions on what to put.                    }
{ Remember to have your player in the correct,    }
{ location                                        }
{ After that click play and enjoy.                }
{                                                 }
{ If you get any problems then please report,     }
{ them on the thread I created at SRL Forums.     }
{                                                 }
{ Thanks to everyone that has worked on Simba,    }
{ SRL and SPS for everything they have done.      }
{                                                 }
{ Thanks for using my script. Jakkle              }
{                                                 }
{~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

program Water_Filler;
{$DEFINE SMART}
{$i srl\srl.simba}
{$i SPS\SPS.simba}
{$IFDEF SMART}
  {$i SRL/SRL/Misc/SmartGraphics.Simba}
{$ENDIF}

{~~~~~~~~~~~~~~~~~~~~~~| Settings |~~~~~~~~~~~~~~~~~~~~~~}

const
  Paint_On_Smart  = True;   // Do you want paint enabled on smart ? if true then,
                            // it will draw a box around the object it's finding.

// Multiplayer breaking system, leave it as 0 to diable.
  Swap_Every      = 0;      // How long to wait to swap to next player (In min's).

// Single player breaking times (35; = 35 min). Set Break_In to 0 to disable
  Break_In        = 0;     // How long should the player work for ?
  Break_For       = 0;     // How long should the player break for ?
  R_Break_In      = 0;      // How many min's should Break_In have randomally + or -
  R_Break_For     = 0;      // How many min's should Break_For have randomally + or -

{~~~~~~~~~~~~~~~~~~~~~~| SRL stats |~~~~~~~~~~~~~~~~~~~~~~}

  STATSUSERNAME   = 'Zabogorie';     // Your stats username here
  STATSPASSWORD   = 'Eu757610o499aRwo8saQ';     // Your stats password here

{~~~~~~~~~~~~~~~~~~~~~~| Player setup |~~~~~~~~~~~~~~~~~~~~~~}

procedure DeclarePlayers;
begin
  HowManyPlayers := 1;              // How many players are you going to be using ?
  NumberOfPlayers(HowManyPlayers);  // Don't touch !!!
  CurrentPlayer := 0;               // Which player do you want to start with ?

  with Players[0] do
  begin
    Name := 'ba1@g.com';                     // Your players username here.
    Pass := '123123';                     // Your players password here.
    Nick := '';                     // Enter 3-4 lowercase letters from your players username.
    Active := True;                 // Do you want to use this player ?
    Pin := '';                      // Your players bank pin.
    Integers[0] := 1000;            // How many loads do you want the player to do ?
    Strings[0] := 'vials';          // What do you want to fill ? There is a list of what you can chose at the top of the script.
    Strings[1] := 'varrock';        // What location to fill at ? There is a list of locations you can chose at the top of the script.
  end;

 { with Players[1] do               // Remove this symbol " { " From the begining and at the end of each players setup to use that player.
  begin                             // Remember if you are using more players to set HowManyPlayer to the amount your going to use.
    Name := '';
    Pass := '';
    Nick := '';
    Active := True;
    Pin := '';
    Integers[0] := 1000;
    Strings[0] := 'bowls';
    Strings[1] := 'varrock';
  end; }

 { with Players[2] do
  begin
    Name := '';
    Pass := '';
    Nick := '';
    Active := True;
    Pin := '';
    Integers[0] := 1000;
    Strings[0] := 'buckets';
    Strings[1] := 'edgeville';
  end; }

 { with Players[3] do
  begin
    Name := '';
    Pass := '';
    Nick := '';
    Active := True;
    Pin := '';
    Integers[0] := 1000;
    Strings[0] := 'jugs';
    Strings[1] := 'falador';
  end; }

end;

{~~~~~~~~~~~~~~~~~| The script, DONT TOUCH. |~~~~~~~~~~~~~~~~~}

type
  objectRecords = record
    Name   : String;
    UpText : TStringArray;
    Amount : Integer;
    Color  : Integer;
    Hue    : Extended;
    Sat    : Extended;
    Tol    : Integer;
    RandX  : Integer;
    RandY  : Integer;
    Hi     : Integer;
    Le     : Integer;
    Path   : TPointArray;
    ThePos : TPoint;
  end;

var
  LoadsToDo, Banked, Start, Every,
   FilledCount, TFVCount, TBanked, RBI, RBF, BI, BF,
    Empty, Clicked, Filled, BreakRounds, TotalBreaks,
     SwitchChar, PlayerBreaked, TheBTime: Integer;
  Switch, LastLoad: Boolean;
  Name: String;
  Fountain, Banker: ObjectRecords;

Procedure Load_Records;
begin
  if (not LoggedIn) then
    Exit;

  case Lowercase(Players[CurrentPlayer].Strings[1]) of
    'varrock', 'arrock', 'aroc':
      begin

        with Fountain do
        begin
          Name    := 'Varrock Fountain';
          UpText  := ['Fountain'];
          Amount  := 100;
          Color   := 15705988;
          Hue     := 0.02;
          Sat     := 3.25;
          Tol     := 5;
          RandX   := RandomRange(-20, 20);
          RandY   := RandomRange(-20, 20);
          Hi      := 50;
          Le      := 50;
          Path    := [Point(4849, 2964), Point(4849, 2954), Point(4849, 2941), Point(4841, 2936), Point(4829, 2931), Point(4817, 2931), Point(4802, 2929), Point(4795, 2923)];
          ThePos  := Point(4787, 2919);
        end;

        with Banker do
        begin
          Name    := 'Varrock Banker';
          UpText  := ['Banker', 'anker', 'anke'];
          Amount  := 500;
          Color   := 4863283;
          Hue     := 0.70;
          Sat     := 0.96;
          Tol     := 12;
          RandX   := RandomRange(0, 1);
          RandY   := RandomRange(0, 1);
          Hi      := 20;
          Le      := 10;
          Path    := [Point(4793, 2916), Point(4795, 2923), Point(4802, 2929), Point(4817, 2931), Point(4829, 2931), Point(4841, 2936), Point(4849, 2941), Point(4849, 2954), Point(4848, 2974)];
          ThePos  := Point(4850, 2974);
        end;

      end;
    'edgeville', 'edge', 'vill':
      begin

        with Fountain do
        begin
          Name    := 'Edgeville Well';
          UpText  := ['Well', 'ell'];
          Amount  := 5;
          Color   := 1317923;
          Hue     := 0.64;
          Sat     := 1.55;
          Tol     := 1;
          RandX   := RandomRange(-5, 5);
          RandY   := RandomRange(-5, 5);
          Hi      := 50;
          Le      := 50;
          Path    := [Point(4212, 2664), Point(4209, 2657), Point(4205, 2643), Point(4192, 2642), Point(4184, 2648)];
          ThePos  := Point(4182, 2646);
        end;

        with Banker do
        begin
          Name    := 'Edgeville Banker';
          UpText  := ['Banker', 'anker', 'anke'];
          Amount  := 100;
          Color   := 3876396;
          Hue     := 0.19;
          Sat     := 0.77;
          Tol     := 12;
          RandX   := RandomRange(0, 1);
          RandY   := RandomRange(0, 1);
          Hi      := 20;
          Le      := 10;
          Path    := [Point(4174, 2643), Point(4180, 2642), Point(4192, 2642), Point(4205, 2643), Point(4209, 2657), Point(4220, 2678)];
          ThePos  := Point(4220, 2678);
        end;

      end;
    'falador', 'alador', 'fally':
      begin

        with Fountain do
        begin
          Name    := 'Falador Waterpump';
          UpText  := ['Water', 'pump'];
          Amount  := 1;
          Color   := 6977402;
          Hue     := 0.00;
          Sat     := 0.07;
          Tol     := 1;
          RandX   := -1;
          RandY   := 3;
          Hi      := 25;
          Le      := 25;
          Path    := [Point(3621, 3176), Point(3617, 3170), Point(3621, 3157), Point(3634, 3151), Point(3636, 3139), Point(3636, 3128), Point(3635, 3125)];
          ThePos  := Point(3635, 3126);
        end;

        with Banker do
        begin
          Name    := 'Bankbooth';
          UpText  := ['Bank', 'booth'];
          Amount  := 100;
          Color   := 6191248;
          Hue     := 0.10;
          Sat     := 1.24;
          Tol     := 6;
          RandX   := RandomRange(1, 3);
          RandY   := RandomRange(1, 3);
          Hi      := 20;
          Le      := 20;
          Path    := [Point(3637, 3141), Point(3623, 3153), Point(3619, 3169), Point(3622, 3183)];
          ThePos  := Point(3622, 3183);
        end;

      end;
  end;
  case Lowercase(Players[CurrentPlayer].Strings[0]) of
    'bowl', 'owl':
      begin
        Name    := 'bowls';
        Empty   := DTMFromString('mlwAAAHicY2dgYPDgZmAIB+JQIPYHYncgdgBiKyCuZGRgKAHiGiBuBOJmKA3iV0UKAnUzYcVcDLgBIx4MBQAFnwbL');
        Clicked := DTMFromString('mlwAAAHicY2dgYOBjgAA2IOYFYlEglgZiWSBmBWIOqDg/lOaAqq+KFGT4//8/VszFgBsw4sFQAAD9sxOX');
        Filled  := DTMFromString('mlwAAAHicY2dgYFDgZmDQBmINIFblhvAlgVgIiEMYGRgigTgaiOOAOAGI44E4CoiNFswG6mbCiuUYcANGPBgKAD8QBVw=');
      end;
    'bucket', 'ucket':
      begin
        Name    := 'buckets';
        Empty   := DTMFromString('m1gAAAHic42JgYBBjZWDgB2IBKBYEYlEglgJiBSBWAmJlIP4OVPsbiP8DMQsjAwM7EHNCMYjNAMS/gJSnhRiQZCKIuRiIA4xEYgQAALdnBfk=');
        Clicked := DTMFromString('m1gAAAHic42JgYBBjZWDgB2IBKBYEYlEglgJiBSBWAmJlIP4OVPsbiP8DMQsjAwM7EHNCMYjNAMS/gJSnhRjD////CWIuBuIAI5EYAQAkBCDM');
        Filled  := DTMFromString('mwQAAAHic42RgYCjmZmCoAeJqIK7ihvDzgDgLiDOBOAOIgxkhOBKI44A4GYoTgTgGiEOBuKKiG2gaE17MxUAYMBKB4QAAcdIJSQ==');
      end;
    'jugs', 'ugs':
      begin
        Name    := 'jugs';
        Empty   := DTMFromString('mrAAAAHic42BgYJjLzcCwAohXQulFQDwLiKcC8UQg9mVkYAgC4jAgjgbiRCBOBuIEII4E4qLcXKApTDixCAN+wEgAwwAAIpQJpA==');
        Clicked := DTMFromString('mrAAAAHic42BgYJjLzcCwAohXQulFQDwLiKcC8UQg9mVkYAgC4jAgjgbiRCBOBuIEII4E4qLcXIb////jxCIM+AEjAQwDADomHoE=');
        Filled  := DTMFromString('mwQAAAHic42RgYPDiZmAIAeJgIA4AYl8g9gBiRyC2BWIHIPZnZGAIA+JYIE4A4kQgToayY4A4GCSWtBpoGhNeLMJAGDASgeEAAHkiB9o=');
      end;
    'vials', 'ials':
      begin
        Name    := 'vials';
        Empty   := DTMFromString('mlwAAAHicY2dgYOAAYmYGCGAFYl4gFgJifiDmhorxALEwFPNB9cTHJwNJJqyYiwE3YMSDoQAAtSMB3A==');
        Clicked := DTMFromString('mFQEAAHicnctLCoAwDEXRpwV/WBR1IOq6OnD/+4i3EBCH9cIhJJAoaUBAg+jynqvRYcKKBbPPVm89Rr8fuHBix+Y/Kd0ysyJB5VU/fHoAtTgmSw==');
        Filled  := DTMFromString('mlwAAAHicY2dgYOCAYmYGCOAHYj4g5gZiLiAWgoqzQuVAapmAOLdkKZSFiZUZcANGPBgKANGpAjk=');
      end;
  end;
end;

{*******************************************************************************
function BreakHandler(Break_In, Break_For, R_Break_In, R_Break_For: Integer): Boolean;
By: Echo_
Edited by: Jakkle.
Description: Takes brakes according to the minute values entered.
*******************************************************************************}
function BreakHandler(Break_In, Break_For, R_Break_In, R_Break_For: Integer): Boolean;
var
  h, m, s,
  StartBTime, WorkedFor: integer;
begin
  if not LoggedIn then Exit;
  if (Break_In < 1) then Exit;

  if (HowManyPlayers = 1) then
  begin
    if (GetTimeRunning < ((BI) + (RBI) + BreakRounds)) then Exit
    else
      if (GetTimeRunning > ((BI) + (RBI) + BreakRounds)) then
      begin
        TheBTime := (BF + RBF);
        WorkedFor := (BI + RBI)
        Writeln('Taking a break for about ' + IntToStr((TheBTime) / 60000) + ' minutes.');
        Logout;
        MarkTime(StartBTime);
        repeat
          ConvertTime(((BF + RBF) - TimeFromMark(StartBTime)), h, m, s);
          ClearDebug;
          Writeln('Breaktime left: ' + IntToStr(h) + ':' + IntToStr(m) + ':' + IntToStr(s));
          Wait(990);
        until(TimeFromMark(StartBTime)>=(TheBTime));
        Writeln('Break time over.');
        Writeln('Logging in.');
        LoginPlayer;
        Result := LoggedIn;
        MarkTime(Start);
        FindNormalRandoms;
        IncEx(BreakRounds, (WorkedFor + TheBTime));
        IncEx(PlayerBreaked, (TheBTime / 60000));
        IncEx(TotalBreaks, 1);
        Writeln('The next break will occur in about ' + IntToStr(Break_In) + ' minutes.');
      end;
  end;
end;

// SPS_WalkPath2.
// This is SPS_WalkPath edited by me, Jakkle.
function SPS_WalkPath2(Path: TPointArray): boolean;
var
  I, H, T, D, N: integer;
  P, MM: TPoint;
begin
  H := High(Path);
  T := GetSystemTime + 20000 + Random(5000);
  N := RandomRange(40, 80);
  while (not Result) and (GetSystemTime < T) do
  begin
    RunEnergy(N);

    P := SPS_GetMyPos;
    for I := H downto 0 do
    begin
      MM.X := MMCX + Path[I].X - P.X;
      MM.Y := MMCY + Path[I].Y - P.Y;

      D := Distance(MM.X, MM.Y, MMCX, MMCY);
      if (D < 2) then
        break
      else
        if (D < 70) then
        begin
          Mouse(MM.X, MM.Y, 0, 0, mouse_Left);

          if FFlag(15) then
          begin
            T := getSystemTime + 20000 + Random(1000);
 	          Break;
          end;
        end;
    end;
    Result := (I = H);
  end;
end;


function HaveEmpty(Where: String): Boolean;
var
  x, y: Integer;
begin
  GameTab(TAB_INV);
  case Lowercase(Where) of
    'inv': Result := FindDTM(Empty, x, y, MIx1, MIy1, MIx2, MIy2);
    'bank': Result := FindDTM(Empty, x, y, MBx1, MBy1, MBx2, MBy2);
  end;
end;

function HaveFilled: Boolean;
var
  x, y: Integer;
begin
  GameTab(TAB_INV);
  Result := FindDTM(Filled, x, y, MIx1, MIy1, MIx2, MIy2);
end;

function ClickEmpty: Boolean;
var
  x, y: Integer;
begin
  if (not LoggedIn) then
    Exit;

  Result := False;
  if FindDTM(Clicked, x, y, MIx1, MIy1, MIx2, MIy2) then
  begin
    Result := True;
    Exit;
  end;
  GameTab(TAB_INV);
  if FindDTM(Empty, x, y, MIx1, MIy1, MIx2, MIy2) then
  begin
    Mouse(x, y, 4, 4, True);
    Wait(200 + Random(50));
    if FindDTM(Clicked, x, y, MIx1, MIy1, MIx2, MIy2) then
      Result := True;
  end;
end;

function WithdrawEmpty: Boolean;
var
  x, y, Tries: Integer;
begin
  if (not LoggedIn) then
    Exit;

  Result := False;
  Tries := 0;
  if FindDTM(Empty, x, y, MBx1, MBy1, MBx2, MBy2) then
  begin
    Mouse(x, y, 4, 4, False);
    Result := WaitOption('All', 500);
  end;
end;

function DoISwitchChar: Boolean;
begin
  if (not LoggedIn) then
    Exit;

  Result := False;
  FindNormalRandoms;
  if (Banked >= LoadsToDo) then
  begin
    Writeln('Player has done all its loads!');
    NextPlayer(False);
    Result := True;
  end;
  if (Switch) then
  begin
    if (PlayersActive > 1) then
    begin
      if (TimeFromMark(Start) >= Every) then
      begin
        Writeln('Player has done its time!');
        NextPlayer(True);
        Result := True;
      end;
    end;
  end;
end;

function FindBanker: Boolean;
var
  CTS: Integer;
  TheArray: TPointArray;
begin
  FindNormalRandoms;
  if (not LoggedIn) or (BankScreen) then
    Exit;

  Result := False;
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(Banker.Hue, Banker.Sat);
  FindColorsSpiralTolerance(MSCX, MSCY, TheArray, Banker.Color, MSX1, MSY1, MSX2, MSY2, Banker.Tol);
  if (Length(TheArray) >= Banker.Amount) then
    Result := True;
  //Writeln('The length of the bank array is(' + IntToStr(Length(TheArray)) + ')');
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
end;

function ClickBanker: Boolean;
var
  CTS, HBT, x, y, i: Integer;
  TheArray: TPointArray;
  MSPoint: TPoint;
  BankATPA: T2DPointArray;
  Bounds: TBox;
begin
  FindNormalRandoms;
  if (not LoggedIn) or (not FindBanker) or (BankScreen) then
    Exit;

  Result := False;
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(Banker.Hue, Banker.Sat);
  FindColorsSpiralTolerance(MSCX, MSCY, TheArray, Banker.Color, MSX1, MSY1, MSX2, MSY2, Banker.Tol);
  if (Length(TheArray) < Banker.Amount) then
  begin
    Writeln('Did not find enough ' +  Banker.Name + ' colours.');
    ColorToleranceSpeed(CTS);
    SetColorSpeed2Modifiers(0.2, 0.2);
    Exit;
  end;
  SortTPAFrom(TheArray, Point(MSCX, MSCY));
  BankATPA := TPAToATPAEx(TheArray, Banker.Le, Banker.Hi);
  case Lowercase(Players[CurrentPlayer].Strings[1]) of
    'varrock', 'arro', 'varo': SortATPAFromSize(BankATPA, Banker.Amount, True);
    'edgeville', 'edge', 'vill': SortATPAFromSize(BankATPA, Banker.Amount, True);
  end;
  HBT := High(BankATPA);
  for i := 0 to HBT do
  begin
    //Writeln('The length of the BankATPA[i] is(' + IntToStr(Length(BankATPA[i])) + ')');
    Bounds := GetTPABounds(BankATPA[i])
    {$IFDEF SMART}
      if (Paint_On_Smart) then
      begin
        SMART_DrawBox(Bounds);
      end;
    {$ENDIF}
    MSPoint := MiddleTPA(BankATPA[i]);
    MMouse(MSPoint.x, MSPoint.y, Banker.RandX , Banker.RandY);
    if (WaitUpTextMulti(Banker.UpText, 100)) then
    begin
      GetMousePos(x, y);
      Mouse(x, y, 0, 0, False);
      if (WaitOption('Bank Bank', 200)) then
      begin
        Writeln('Clicked banker');
        {$IFDEF SMART}
          if (Paint_On_Smart) then
          begin
            SMART_ClearCanvas;
          end;
        {$ENDIF}
        Result := True;
      end;
    end else
      Continue;
    Break;
  end;
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
end;

function FindFountain: Boolean;
var
  CTS: Integer;
  TheArray: TPointArray;
begin
  if (not LoggedIn) then
    Exit;

  FindNormalRandoms;
  Result := False;
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(Fountain.Hue, Fountain.Sat);
  FindColorsSpiralTolerance(MSCX, MSCY, TheArray, Fountain.Color, MSX1, MSY1, MSX2, MSY2, Fountain.Tol);
  if (Length(TheArray) >= Fountain.Amount) then
    Result := True;
  //Writeln('The length of the fountain array is(' + IntToStr(Length(TheArray)) + ')');
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
end;

function ClickFountain: Boolean;
var
  HP, CTS, x, y, i: Integer;
  TheArray: TPointArray;
  MSPoint: TPoint;
  FountainATPA: T2DPointArray;
  Bounds: TBox;
begin
  if (not LoggedIn) then
    Exit;

  CTS := GetColorToleranceSpeed;
  FindNormalRandoms;
  Result := False;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(Fountain.Hue, Fountain.Sat);
  FindColorsSpiralTolerance(MSCX, MSCY, TheArray, Fountain.Color, MSX1, MSY1, MSX2, MSY2, Fountain.Tol);
  if (Length(TheArray) < Fountain.Amount) then
  begin
    Writeln('Failed to find the color, no result.');
    ColorToleranceSpeed(CTS);
    SetColorSpeed2Modifiers(0.2, 0.2);
    Exit;
  end;
  SortTPAFrom(TheArray, Point(MSCX, MSCY));
  FountainATPA := TPAToATPAEx(TheArray, Fountain.Le, Fountain.Hi);
  HP := High(FountainATPA)
  for i := 0 to HP do
  begin
    //Writeln('The length of the fountain[i] array is(' + IntToStr(Length(FountainATPA[i])) + ')');
    Bounds := GetTPABounds(FountainATPA[i])
    {$IFDEF SMART}
      if (Paint_On_Smart) then
      begin
        SMART_DrawBox(Bounds);
      end;
    {$ENDIF}

    MSPoint := MiddleTPA(FountainATPA[i]);
    MMouse(MSPoint.x - 1, MSPoint.y - 6, Fountain.RandX, Fountain.RandY);
    if (WaitUpTextMulti(Fountain.UpText, 200)) then
    begin
      GetMousePos(x, y);
      Mouse(x, y, 0, 0, True);
      if (DidRedClick) then
      begin
        {$IFDEF SMART}
          if (Paint_On_Smart) then
          begin
            SMART_ClearCanvas;
          end;
        {$ENDIF}
        Result := True;
      end;
    end else
      Continue;
    Break;
  end;
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
end;

function IsFilling: Boolean;
begin
  if (not LoggedIn) then
    Exit;

  Result := (PixelShift(IntToBox(248, 132, 269, 175), 500) > 350);
end;

procedure Antiban;
begin
  FindNormalRandoms;
  if (not LoggedIn) then
    Exit;

  case Random(200) of
    150..155:
      begin
	      GameTab(RandomRange(tab_Combat, tab_Logout));
	      Wait(1500 + Random(1000));
      end;
    110..112: PickUpMouse;
    70..80:
      begin
        HoverSkill('Random', FALSE);
        Wait(1500 + Random(1000));
      end;
    1..40: SleepAndMoveMouse(1000 + Random(500));
  end;
end;

function Walking(Where: string): Boolean;
begin
  if (not LoggedIn) then
    Exit;

  MakeCompass('N');
  SetAngle(0);
  Result := False;
  case Lowercase(Where) of
    'fountain' :
      begin
        if SPS_WalkPath2(Fountain.Path) then
          Result := True;
      end;
    'fountainpos' :
      begin
        if SPS_WalkToPos(Fountain.ThePos) then
          Result := True;
      end;
    'bank' :
      begin
        if SPS_WalkPath2(Banker.Path) then
          Result := True;
      end;
    'bankpos' :
      begin
        if SPS_WalkToPos(Banker.ThePos) then
          Result := True;
      end;
  end;
end;

procedure FillUp;
var
  Tries, ClickETries, ClickFTries, t: Integer;
begin
  FindNormalRandoms;
  if (not LoggedIn) then
    Exit;

  if (not HaveEmpty('inv')) then
    Exit;
  while (IsMoving) do
    Wait(50);
  Tries := 0;
  ClickETries := 0;
  ClickFTries := 0;
  if (FindFountain) then
  begin
    Writeln('Found Fountain.');
    repeat
      if (ClickEmpty) then
      begin
        Writeln('Click Empty ' + (Name) + '.');
        Wait(100 + Random(200));
        if (ClickFountain) then
        Begin
          Writeln('Clicked Fountain.');
          FindNormalRandoms;
          if (not LoggedIn) then
            Exit;
        end else
          begin
            Walking('fountainpos');
            Inc(ClickFTries);
          end;
      end else
        Inc(ClickETries);
    Wait(1000);
    until (IsFilling) or (HaveFilled) or (ClickETries > 10) or (ClickFTries > 10);
    if (ClickETries > 10) or (ClickFTries > 10) then
    begin
      Writeln('Could not click the Fountain, logging out.');
      NextPlayer(False);
      Exit;
    end;
    MarkTime(t);
    while (HaveEmpty('inv')) do
    begin
      FindNormalRandoms;
      if (not LoggedIn) then
        Exit;

      if (TimeFromMark(t) > 25000) then
        FillUp;

      Wait(RandomRange(1000, 2000));
      Antiban;
    end;
    Exit;
  end else
    begin
      Writeln('Fountain not found, going to try and fiind it.');
      Walking('fountainpos');
      FindNormalRandoms;
      Wait(500 + Random(100));
      if (HaveEmpty('inv')) then
        FillUp;
    end;
end;

procedure Bank;
var
  PinTries, Tries, WithdrawTries, EmptyCount,
  FindBankTries, ClickTries, t: Integer;
begin
  FindNormalRandoms;
  if (not LoggedIn) then
    Exit;

  Writeln('About to bank.');
  PinTries := 0;
  Tries := 0;
  FindBankTries := 0;
  ClickTries := 0;
  while (IsMoving) do
    Wait(50);
  if (FindBanker) then
  begin
    repeat
      Writeln('Found banker.');
      Writeln('About to click the banker.');
      MarkTime(t);
      if (ClickBanker) then
      repeat
        while (IsMoving) do
          Wait(50);

        FindNormalRandoms;
        if (not LoggedIn) then
          Exit;

        Wait(100 + Random(100));
        if (BankScreen) then
          Break;

        if (PinScreen) then
        repeat
          InPin(Players[CurrentPlayer].Pin);
          Inc(PinTries);
          Writeln('Tried bank pin ' + IntToStr(PinTries) + ' times.');
          Wait(200 + Random(200));
        until(BankScreen) Or (PinTries > 3);
        if (PinTries > 3) then
        begin
          Writeln('Tried bank pin ' + IntToStr(PinTries) + ' times but its not working, logging out.');
          NextPlayer(False);
          Exit;
        end;
      until (BankScreen) or (TimeFromMark(t) > 5000);
      if (TimeFromMark(t) > 5000) then
        bank;
      Inc(ClickTries);
    until (BankScreen) or (ClickTries > 9);
    if (ClickTries > 9) then
    begin
      Writeln('Tried bank pin ' + IntToStr(ClickTries) + ' times but its not working, logging out.');
      NextPlayer(False);
      Exit;
    end;
  end else
    begin
      Writeln('Banker not found.')
      Wait(300 + Random(300));
      FindNormalRandoms;
      if (not LoggedIn) then
        Exit;
      repeat
        Walking('bankpos');
        Inc(FindBankTries);
        Writeln('Find bank Tries(' + IntToStr(FindBankTries) + ').');
      until(FindBanker) or (FindBankTries > 10);
      if (FindBankTries > 10) then
      begin
        Writeln('Looking for the bank failed, Logging out.');
        NextPlayer(False);
        Exit;
      end else
        Bank;
    end;
  if (BankScreen) then
  begin
    FilledCount := CountItems('dtm', Filled, []);
    IncEx(TFVCount, FilledCount);
    IncEx(Players[CurrentPlayer].Integers[3], FilledCount);
    case Lowercase(Players[CurrentPlayer].Strings[0]) of
      'bowls', 'owl': stats_IncVariable('Bowls Filled', FilledCount);
      'buckets', 'ucket': stats_IncVariable('Buckets Filled', FilledCount);
      'jugs', 'ug': stats_IncVariable('Jugs Filled', FilledCount);
      'vials', 'ial': stats_IncVariable('Vials Filled', FilledCount);
    end;
    Writeln('Banked ' + IntToStr(FilledCount) + ' filled ' + (Name));
    if (InvCount > 0) then
    begin
      Writeln('InvCount ' + IntToStr(InvCount));
      if DepositAll then
      begin
        Wait(500 + Random(500));
        if (LastLoad) then
        begin
          NextPlayer(False);
          Exit;
        end;
      end;
    end;
    if (InvEmpty) then
      if (WithdrawEmpty) then
      begin
        Wait(700 + Random(500)); // Changed from 500 to 700
        EmptyCount := CountItems('dtm', Empty, []);
        Writeln('Withdrawn ' + IntToStr(EmptyCount) + ' empty ' + (Name));
        if (EmptyCount < 28) then
        begin
          if HaveEmpty('bank') then
            WithdrawEmpty;
        end;
      end;
    Inc(TBanked);
    Inc(Players[CurrentPlayer].Integers[1]);
    if (EmptyCount < 28) then
    begin
      Writeln('Only ' + IntToStr(EmptyCount) + ' empty ' + (Name) + ' left, this is the last load.');
      LastLoad := True;
    end;
  end;
end;

procedure ProgressReport;
var
  I, FilledPH: Integer;
begin
  SRLRandomsReport;
  Writeln('[===============================================]');
  Writeln('[----------(Jakkles Water Filler V2.1)----------]');
  Writeln('[===============================================]');
  Writeln('[=  Overall ');
  Writeln('[=  Running For ' + MsToTime(GetTimeRunning, Time_Formal));
  Writeln('[=  Total loads done ' + IntToStr(TBanked));
  Writeln('[=  Filled ' + IntToStr(TFVCount));
  Writeln('[===============================================]');
  for i := 0 to High(Players) do
  begin
    FilledPH := 0;
    if (PlayerWorked(i) > 0) then
    begin
      FilledPH := ((Players[i].Integers[3] * 3600) / (PlayerWorked(i) / 1000 - (TheBTime / 60000)));
      Writeln('[=  Player ' + IntToStr(i));
      Writeln('[=    Active ' + BoolToStr(Players[i].Active));
      Writeln('[=    Filling ' + ToStr(Players[i].Strings[0]) + ' at ' + ToStr(Players[i].Strings[1]));
      Writeln('[=    Worked ' + MsToTime(PlayerWorked(i), Time_Formal));
      if (HowManyPlayers = 1) then
        Writeln('[=    Had ' + IntToStr(TotalBreaks) + ' breaks. Total break time: ' + IntToStr(PlayerBreaked) + ' mins.');
      Writeln('[=    Loads done ' + IntToStr(Players[i].Integers[1]) + ' out of ' + IntToStr(Players[i].Integers[0]));
      Writeln('[=    Filled ' + IntToStr(Players[i].Integers[3]) + ' ' + ToStr(Players[i].Strings[0]));
      Writeln('[=    Filling rate is ' + IntToStr(FilledPH) + ' per hour');
      Writeln('[===============================================]');
    end;
  end;
end;

procedure MainLoop;
begin
  FindNormalRandoms;
  if (not LoggedIn) then
    LoginPlayer;

  Wait(200);
  WriteLn('Setting up the script and making sure we are ready to start.');
  Switch := False;
  BreakRounds := 0;
  begin
    Repeat
      Load_Records;
      case Lowercase(Players[CurrentPlayer].Strings[1]) of
        'varrock', 'arro', 'varo': SPS_Setup(RUNESCAPE_SURFACE, ['12_7','11_7']);
        'edgeville', 'edge', 'vill': SPS_Setup(RUNESCAPE_SURFACE, ['10_5', '10_6', '9_5', '9_6']);
        'falador', 'alad', 'fally' : SPS_Setup(RUNESCAPE_SURFACE, ['7_6', '7_7', '8_6', '8_7', '8_8', '9_7', '9_8']);
      end;
      LoadsToDo := Players[CurrentPlayer].Integers[0];
      if(Swap_Every > 0)then
      begin
        Switch := True;
        SwitchChar  := Swap_Every + RandomRange(1, 9);
        Every := RandomRange(Swap_Every * 60000, SwitchChar * 60000);
        Writeln('Switching to next player in (' + IntToStr(Every) + ' MS)');
        Writeln('Switching to next player in (' + IntToStr(Every / 60000) + ' Mins)');
      end;
      MakeCompass('N');
      SetAngle(0);
      if (not HaveEmpty('inv')) then
      begin
        WriteLn('No empty ' + (Name) + ' in inventory, going bank to get some.');
        if (not FindBanker) then
        begin
          Walking('bank');
        end;
        bank;
      end;
      Wait(1000);
      if (HaveEmpty('inv')) then
      begin
        MarkTime(Start);
        WriteLn('We have empty ' + (Name) + ', going to fill them up.');
        repeat
          if (HowManyPlayers = 1) then
          begin
            if (TimeFromMark(Start) < 2000) then
            begin
              LastLoad := False;
              BI  := (Break_In * 60000);
              BF  := (Break_For * 60000);
              RBI := RandomRange(-R_Break_In * 60000, R_Break_In * 60000);
              RBF := RandomRange(-R_Break_For * 60000, R_Break_For * 60000);
            end;
            Writeln('Taking a break in (' + IntToStr(((BI + RBI) - TimeFromMark(Start)) / 60000) + ' Mins)');
          end;
          MouseSpeed  := RandomRange(17, 25);
          if Walking('fountain') then
          begin
            FillUp;
            if Walking('bank') then
            begin
              Bank;
              Banked := Players[CurrentPlayer].Integers[1];
              ProgressReport;
              stats_IncVariable('Loads Done', 1);
              stats_Commit();
              writeln('SRL Stats Comitted');
            end;
          end;
          BreakHandler(Break_In, Break_For, R_Break_In, R_Break_For);
        until(DoISwitchChar) or (not LoggedIn);
      end;
      if (not LoggedIn) then
        LoginPlayer;
      FreeDTMs([Empty, Clicked, Filled]);
    until(AllPlayersInActive);
    ProgressReport;
  end;
end;

begin
  ClearDebug;
  Writeln('Loading.');
  Wait(200);
  ClearDebug;
  Writeln('Loading..');
  Wait(200);
  ClearDebug;
  Writeln('Loading...');
  Wait(200);
  ClearDebug;
  Writeln('Loading.....');
  Wait(200);
  ClearDebug;
  Writeln('/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/');
  Writeln('~~~~~~~~~ Welcome to Jakkles Water Filler ~~~~~~~~~');
  Writeln('Thanks for choosing this script.');
  Writeln('I hope everything runs smooth.');
  Writeln('If you have any problems please go to');
  Writeln('http://villavu.com/forum/index.php');
  Writeln('and report them on my tread I made for this script.');
  Writeln('\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\');
  SRL_SixHourFix := True;
  Smart_FixSpeed := True;
  SetupSRL;
  if (STATSUSERNAME = '') then
    setupSRLStats(1240, 'Anonymous', 'anon1337')
  else
    setupSRLStats(1240, STATSUSERNAME, STATSPASSWORD);
  DeclarePlayers;
  LoginPlayer;
  MainLoop;
  TerminateScript;
end.
